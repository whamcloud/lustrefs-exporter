on:
  push:
    branches: main

  pull_request:

jobs:
  benchmark_lustre_metrics:
    name: Benchmark Lustre Metrics
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: bencherdev/bencher@main

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install -y valgrind

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # Callgrind runner version must match iai-callgrind version specified in Cargo.toml
      - name: Install iai-callgrind-runner
        run: |
          version=$(cargo metadata --format-version=1 |\
            jq '.packages[] | select(.name == "iai-callgrind").version' |\
            tr -d '"'
          )
          cargo install iai-callgrind-runner --version $version

      - name: Track main branch benchmarks with Bencher
        run: |
          bencher run \
          --project '${{ secrets.BENCHER_PROJECT_ID }}' \
          --token '${{ secrets.BENCHER_API_TOKEN }}' \
          --branch main \
          --testbed ubuntu-latest \
          --threshold-measure instructions \
          --threshold-test t_test \
          --threshold-max-sample-size 64 \
          --threshold-window 32 \
          --threshold-lower-boundary 0.95 \
          --thresholds-reset \
          --err \
          --adapter rust_iai_callgrind \
          --github-actions '${{ secrets.GITHUB_TOKEN }}' \
          "cargo bench --bench lustre_metrics"

  benchmark_scrape_operation:
    name: Benchmark Scrape Operation
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: bencherdev/bencher@main

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Track main branch benchmarks with Bencher
        run: |
          # Run the benchmark first (suppress Criterion output)
          cargo bench --bench scrape_allocations 2>&1 > /dev/null

          bencher run \
          --project '${{ secrets.BENCHER_PROJECT_ID }}' \
          --token '${{ secrets.BENCHER_API_TOKEN }}' \
          --branch main \
          --testbed ubuntu-latest \
          --threshold-measure peak_rss \
          --threshold-test t_test \
          --threshold-max-sample-size 64 \
          --threshold-window 32 \
          --threshold-lower-boundary 0.95 \
          --thresholds-reset \
          --err \
          --adapter json \
          --github-actions '${{ secrets.GITHUB_TOKEN }}' \
          --file lustrefs-exporter/scrape_allocations_results.json
